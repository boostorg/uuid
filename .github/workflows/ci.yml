name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - feature/**

env:
  GIT_FETCH_JOBS: 8
  NET_RETRY_COUNT: 5
  UBSAN_OPTIONS: print_stacktrace=1

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: gcc-4.8
            cxxstd: "11"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: g++-4.8-multilib
            address-model: 32,64
          - toolset: gcc-4.9
            cxxstd: "11"
            container: ubuntu:16.04
            os: ubuntu-latest
            install: g++-4.9-multilib
            address-model: 32,64
          - toolset: gcc-5
            cxxstd: "11,14,1z"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: g++-5-multilib
            address-model: 32,64
          - toolset: gcc-6
            cxxstd: "11,14,1z"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: g++-6-multilib
            address-model: 32,64
          - toolset: gcc-7
            cxxstd: "11,14,17"
            os: ubuntu-20.04
            install: g++-7-multilib
            address-model: 32,64
          - toolset: gcc-8
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
            install: g++-8-multilib
            address-model: 32,64
          - toolset: gcc-9
            cxxstd: "11,14,17,2a"
            os: ubuntu-20.04
            install: g++-9-multilib
            address-model: 32,64
          - toolset: gcc-10
            cxxstd: "11,14,17,2a"
            os: ubuntu-22.04
            install: g++-10-multilib
            address-model: 32,64
          - toolset: gcc-11
            cxxstd: "11,14,17,20"
            os: ubuntu-22.04
            install: g++-11-multilib
            address-model: 32,64
          - toolset: gcc-12
            cxxstd: "11,14,17,20,2b"
            os: ubuntu-22.04
            install: g++-12-multilib
            address-model: 32,64
          - toolset: gcc-13
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:23.04
            os: ubuntu-latest
            install: g++-13-multilib
            address-model: 32,64
          - toolset: gcc-14
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:24.04
            os: ubuntu-latest
            install: g++-14-multilib
            address-model: 32,64
          - toolset: gcc-13
            cxxstd: "11,14,17,20,2b"
            instruction-set: nehalem
            cpu-requirements: [ sse4_1, sse4_2 ]
            os: ubuntu-latest
            container: ubuntu:23.04
            install: g++-13-multilib
            address-model: 32,64
          - toolset: gcc-13
            cxxstd: "11,14,17,20,2b"
            instruction-set: skylake-avx512
            cpu-requirements: [ avx512f, avx512cd, avx512vl, avx512dq, avx512bw, bmi1, bmi2 ]
            os: ubuntu-latest
            container: ubuntu:23.04
            install: g++-13-multilib
            address-model: 32,64
          - toolset: clang
            compiler: clang++-3.9
            cxxstd: "11,14"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: clang-3.9
          - toolset: clang
            compiler: clang++-4.0
            cxxstd: "11,14"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: clang-4.0
          - toolset: clang
            compiler: clang++-5.0
            cxxstd: "11,14,1z"
            container: ubuntu:18.04
            os: ubuntu-latest
            install: clang-5.0
          - toolset: clang
            compiler: clang++-6.0
            cxxstd: "11,14,17"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-6.0
          - toolset: clang
            compiler: clang++-7
            cxxstd: "11,14,17"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-7
          - toolset: clang
            compiler: clang++-8
            cxxstd: "11,14,17"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-8
          - toolset: clang
            compiler: clang++-9
            cxxstd: "11,14,17,2a"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-9
          - toolset: clang
            compiler: clang++-10
            cxxstd: "11,14,17,2a"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-10
          - toolset: clang
            compiler: clang++-11
            cxxstd: "11,14,17,2a"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-11
          - toolset: clang
            compiler: clang++-12
            cxxstd: "11,14,17,20"
            container: ubuntu:20.04
            os: ubuntu-latest
            install: clang-12
          - toolset: clang
            compiler: clang++-13
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:22.04
            os: ubuntu-latest
            install: clang-13
          - toolset: clang
            compiler: clang++-14
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:22.04
            os: ubuntu-latest
            install: clang-14
          - toolset: clang
            compiler: clang++-15
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:22.04
            os: ubuntu-latest
            install: clang-15
          - toolset: clang
            compiler: clang++-16
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:23.04
            os: ubuntu-latest
            install: clang-16
          - toolset: clang
            compiler: clang++-17
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:23.10
            os: ubuntu-latest
            install: clang-17
          - toolset: clang
            compiler: clang++-18
            cxxstd: "11,14,17,20,2b"
            container: ubuntu:24.04
            os: ubuntu-latest
            install: clang-18
          - toolset: clang
            compiler: clang++-17
            cxxstd: "11,14,17,20,2b"
            instruction-set: nehalem
            cpu-requirements: [ sse4_1, sse4_2 ]
            container: ubuntu:23.10
            os: ubuntu-latest
            install: clang-17
          - toolset: clang
            compiler: clang++-17
            cxxstd: "11,14,17,20,2b"
            instruction-set: skylake-avx512
            cpu-requirements: [ avx512f, avx512cd, avx512vl, avx512dq, avx512bw, bmi1, bmi2 ]
            container: ubuntu:23.10
            os: ubuntu-latest
            install: clang-17
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-13
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-14
          - toolset: clang
            cxxstd: "11,14,17,20,2b"
            os: macos-15

    runs-on: ${{matrix.os}}
    container: ${{matrix.container}}

    defaults:
      run:
        shell: bash

    steps:
      - name: Setup container environment
        if: matrix.container
        run: |
          apt-get -o Acquire::Retries=$NET_RETRY_COUNT update
          apt-get -o Acquire::Retries=$NET_RETRY_COUNT -y install sudo python3 git curl g++

      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT update
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT -y install ${{join(matrix.install, ' ')}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          DEPINST_ARGS=()
          GIT_VERSION="$(git --version | sed -e 's/git version //')"
          GIT_HAS_JOBS=1
          if [ -f "/etc/debian_version" ]
          then
              if $(dpkg --compare-versions "$GIT_VERSION" lt 2.8.0)
              then
                  GIT_HAS_JOBS=0
              fi
          else
              declare -a GIT_VER=(${GIT_VERSION//./ })
              declare -a GIT_MIN_VER=(2 8 0)
              for ((i=0; i<${#GIT_VER[@]}; i++))
              do
                  if [ -z "${GIT_MIN_VER[i]}" ]
                  then
                      GIT_MIN_VER[i]=0
                  fi
                  if [ "${GIT_VER[i]}" -lt "${GIT_MIN_VER[i]}" ]
                  then
                      GIT_HAS_JOBS=0
                      break
                  fi
              done
          fi
          if [ "$GIT_HAS_JOBS" -ne 0 ]
          then
              DEPINST_ARGS+=("--git_args" "--jobs $GIT_FETCH_JOBS")
          fi
          mkdir -p snapshot
          cd snapshot
          echo "Downloading library snapshot: https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          curl -L --retry "$NET_RETRY_COUNT" -o "${LIBRARY}-${GITHUB_SHA}.tar.gz" "https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          tar -xf "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          if [ ! -d "${LIBRARY}-${GITHUB_SHA}" ]
          then
              echo "Library snapshot does not contain the library directory ${LIBRARY}-${GITHUB_SHA}:"
              ls -la
              exit 1
          fi
          rm -f "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          cd ..
          git clone -b "$BOOST_BRANCH" --depth 1 "https://github.com/boostorg/boost.git" "boost-root"
          cd boost-root
          mkdir -p libs
          rm -rf "libs/$LIBRARY"
          mv -f "../snapshot/${LIBRARY}-${GITHUB_SHA}" "libs/$LIBRARY"
          rm -rf "../snapshot"
          git submodule update --init tools/boostdep
          DEPINST_ARGS+=("-I" "examples" "$LIBRARY")
          python3 tools/boostdep/depinst/depinst.py "${DEPINST_ARGS[@]}"
          ./bootstrap.sh
          ./b2 -d0 headers

      - name: Create user-config.jam
        if: matrix.compiler
        run: |
          echo "using ${{matrix.toolset}} : : ${{matrix.compiler}} ;" > ~/user-config.jam

      - name: Run tests
        run: |
          cd boost-root
          ADDRMD=${{matrix.address-model}}
          INSTRUCTION_SET=${{matrix.instruction-set}}
          if [ -n "${{matrix.cpu-requirements}}" ]
          then
            cpu_flags="$(lscpu | grep -F "Flags:" | sed "s/^Flags:\\s*//")";
            for requirement in ${{join(matrix.cpu-requirements, ' ')}}
            do
              re="(^|[^[:alnum:]_])$requirement([^[:alnum:]_]|\$)"
              if ! [[ "$cpu_flags" =~ $re ]]
              then
                echo "CPU lacks required feature: $requirement"
                echo "Skipping testing"
                exit 0
              fi
            done
          fi
          ./b2 -j2 libs/$LIBRARY/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} ${ADDRMD:+address-model=$ADDRMD} ${INSTRUCTION_SET:+instruction-set=$INSTRUCTION_SET} variant=debug,release

  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolset: msvc-14.0
            cxxstd: 14,latest
            addrmd: 32,64
            os: windows-2019
          - toolset: msvc-14.2
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2019
          - toolset: msvc-14.3
            cxxstd: "14,17,20,latest"
            addrmd: 32,64
            os: windows-2022
          - toolset: clang-win
            cxxstd: "14,17,latest"
            addrmd: 32,64
            os: windows-2022
          - toolset: gcc
            cxxstd: "11,14,17,2a"
            addrmd: 64
            os: windows-2019

    runs-on: ${{matrix.os}}

    steps:
      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          mkdir snapshot
          cd snapshot
          echo Downloading library snapshot: https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip
          curl -L --retry %NET_RETRY_COUNT% -o "%LIBRARY%-%GITHUB_SHA%.zip" "https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip"
          tar -xf "%LIBRARY%-%GITHUB_SHA%.zip"
          if not exist "%LIBRARY%-%GITHUB_SHA%\" (
              echo Library snapshot does not contain the library directory %LIBRARY%-%GITHUB_SHA%:
              dir
              exit /b 1
          )
          del /f "%LIBRARY%-%GITHUB_SHA%.zip"
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          if not exist "libs\" mkdir libs
          if exist "libs\%LIBRARY%\" rmdir /s /q "libs\%LIBRARY%"
          move /Y "..\snapshot\%LIBRARY%-%GITHUB_SHA%" "libs\%LIBRARY%"
          rmdir /s /q "..\snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py -I examples --git_args "--jobs %GIT_FETCH_JOBS%" %LIBRARY%
          cmd /c bootstrap
          b2 -d0 headers

      - name: Run tests
        shell: cmd
        run: |
          cd boost-root
          b2 -j2 libs/%LIBRARY%/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} address-model=${{matrix.addrmd}} variant=debug,release embed-manifest-via=linker

  posix-cmake-subdir:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: ubuntu-latest
            opts: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT update
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT -y install ${{join(matrix.install, ' ')}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          mkdir -p snapshot
          cd snapshot
          echo "Downloading library snapshot: https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          curl -L --retry "$NET_RETRY_COUNT" -o "${LIBRARY}-${GITHUB_SHA}.tar.gz" "https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          tar -xf "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          if [ ! -d "${LIBRARY}-${GITHUB_SHA}" ]
          then
              echo "Library snapshot does not contain the library directory ${LIBRARY}-${GITHUB_SHA}:"
              ls -la
              exit 1
          fi
          rm -f "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          cd ..
          git clone -b "$BOOST_BRANCH" --depth 1 "https://github.com/boostorg/boost.git" "boost-root"
          cd boost-root
          mkdir -p libs
          rm -rf "libs/$LIBRARY"
          mv -f "../snapshot/${LIBRARY}-${GITHUB_SHA}" "libs/$LIBRARY"
          rm -rf "../snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs $GIT_FETCH_JOBS" $LIBRARY

      - name: Use library with add_subdirectory
        run: |
          cd "boost-root/libs/$LIBRARY/test/cmake_subdir_test"
          mkdir __build__ && cd __build__
          cmake ${{matrix.opts}} ..
          cmake --build .
          ctest --output-on-failure --no-tests=error

  posix-cmake-install:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: ubuntu-latest
            opts: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT update
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT -y install ${{join(matrix.install, ' ')}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          mkdir -p snapshot
          cd snapshot
          echo "Downloading library snapshot: https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          curl -L --retry "$NET_RETRY_COUNT" -o "${LIBRARY}-${GITHUB_SHA}.tar.gz" "https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          tar -xf "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          if [ ! -d "${LIBRARY}-${GITHUB_SHA}" ]
          then
              echo "Library snapshot does not contain the library directory ${LIBRARY}-${GITHUB_SHA}:"
              ls -la
              exit 1
          fi
          rm -f "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          cd ..
          git clone -b "$BOOST_BRANCH" --depth 1 "https://github.com/boostorg/boost.git" "boost-root"
          cd boost-root
          mkdir -p libs
          rm -rf "libs/$LIBRARY"
          mv -f "../snapshot/${LIBRARY}-${GITHUB_SHA}" "libs/$LIBRARY"
          rm -rf "../snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs $GIT_FETCH_JOBS" $LIBRARY

      - name: Configure
        run: |
          cd boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=$LIBRARY -DCMAKE_INSTALL_PREFIX=~/.local ${{matrix.opts}} ..

      - name: Install
        run: |
          cd boost-root/__build__
          cmake --build . --target install

      - name: Use the installed library
        run: |
          cd "boost-root/libs/$LIBRARY/test/cmake_install_test" && mkdir __build__ && cd __build__
          cmake -DCMAKE_INSTALL_PREFIX=~/.local ${{matrix.opts}} ..
          cmake --build .
          ctest --output-on-failure --no-tests=error

  posix-cmake-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: ubuntu-latest
            opts: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - os: macos-13
          - os: macos-14
          - os: macos-15

    runs-on: ${{matrix.os}}

    steps:
      - name: Install packages
        if: matrix.install
        run: |
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT update
          sudo apt-get -o Acquire::Retries=$NET_RETRY_COUNT -y install ${{join(matrix.install, ' ')}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          mkdir -p snapshot
          cd snapshot
          echo "Downloading library snapshot: https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          curl -L --retry "$NET_RETRY_COUNT" -o "${LIBRARY}-${GITHUB_SHA}.tar.gz" "https://github.com/${GITHUB_REPOSITORY}/archive/${GITHUB_SHA}.tar.gz"
          tar -xf "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          if [ ! -d "${LIBRARY}-${GITHUB_SHA}" ]
          then
              echo "Library snapshot does not contain the library directory ${LIBRARY}-${GITHUB_SHA}:"
              ls -la
              exit 1
          fi
          rm -f "${LIBRARY}-${GITHUB_SHA}.tar.gz"
          cd ..
          git clone -b "$BOOST_BRANCH" --depth 1 "https://github.com/boostorg/boost.git" "boost-root"
          cd boost-root
          mkdir -p libs
          rm -rf "libs/$LIBRARY"
          mv -f "../snapshot/${LIBRARY}-${GITHUB_SHA}" "libs/$LIBRARY"
          rm -rf "../snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs $GIT_FETCH_JOBS" $LIBRARY

      - name: Configure
        run: |
          cd boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=$LIBRARY -DBUILD_TESTING=ON ${{matrix.opts}} ..

      - name: Build tests
        run: |
          cd boost-root/__build__
          cmake --build . --target tests

      - name: Run tests
        run: |
          cd boost-root/__build__
          ctest --output-on-failure --no-tests=error

  windows-cmake-subdir:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022
          - os: windows-latest
            opts: "-G \"MinGW Makefiles\""
          - os: windows-latest
            opts: "-T clangcl"

    runs-on: ${{matrix.os}}

    steps:
      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          mkdir snapshot
          cd snapshot
          echo Downloading library snapshot: https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip
          curl -L --retry %NET_RETRY_COUNT% -o "%LIBRARY%-%GITHUB_SHA%.zip" "https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip"
          tar -xf "%LIBRARY%-%GITHUB_SHA%.zip"
          if not exist "%LIBRARY%-%GITHUB_SHA%\" (
              echo Library snapshot does not contain the library directory %LIBRARY%-%GITHUB_SHA%:
              dir
              exit /b 1
          )
          del /f "%LIBRARY%-%GITHUB_SHA%.zip"
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          if not exist "libs\" mkdir libs
          if exist "libs\%LIBRARY%\" rmdir /s /q "libs\%LIBRARY%"
          move /Y "..\snapshot\%LIBRARY%-%GITHUB_SHA%" "libs\%LIBRARY%"
          rmdir /s /q "..\snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs %GIT_FETCH_JOBS%" %LIBRARY%

      - name: Use library with add_subdirectory (Debug)
        shell: cmd
        run: |
          cd "boost-root/libs/%LIBRARY%/test/cmake_subdir_test"
          mkdir __build__ && cd __build__
          cmake ${{matrix.opts}} ..
          cmake --build . --config Debug
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Use library with add_subdirectory (Release)
        shell: cmd
        run: |
          cd "boost-root/libs/%LIBRARY%/test/cmake_subdir_test/__build__"
          cmake --build . --config Release
          ctest --output-on-failure --no-tests=error -C Release

  windows-cmake-install:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022
          - os: windows-latest
            opts: "-G \"MinGW Makefiles\""
          - os: windows-latest
            opts: "-T clangcl"

    runs-on: ${{matrix.os}}

    steps:
      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          mkdir snapshot
          cd snapshot
          echo Downloading library snapshot: https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip
          curl -L --retry %NET_RETRY_COUNT% -o "%LIBRARY%-%GITHUB_SHA%.zip" "https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip"
          tar -xf "%LIBRARY%-%GITHUB_SHA%.zip"
          if not exist "%LIBRARY%-%GITHUB_SHA%\" (
              echo Library snapshot does not contain the library directory %LIBRARY%-%GITHUB_SHA%:
              dir
              exit /b 1
          )
          del /f "%LIBRARY%-%GITHUB_SHA%.zip"
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          if not exist "libs\" mkdir libs
          if exist "libs\%LIBRARY%\" rmdir /s /q "libs\%LIBRARY%"
          move /Y "..\snapshot\%LIBRARY%-%GITHUB_SHA%" "libs\%LIBRARY%"
          rmdir /s /q "..\snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs %GIT_FETCH_JOBS%" %LIBRARY%

      - name: Configure
        shell: cmd
        run: |
          cd boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=%LIBRARY% -DCMAKE_INSTALL_PREFIX=C:/cmake-prefix ${{matrix.opts}} ..

      - name: Install (Debug)
        shell: cmd
        run: |
          cd boost-root/__build__
          cmake --build . --target install --config Debug

      - name: Install (Release)
        shell: cmd
        run: |
          cd boost-root/__build__
          cmake --build . --target install --config Release

      - name: Use the installed library (Debug)
        shell: cmd
        run: |
          cd "boost-root/libs/%LIBRARY%/test/cmake_install_test" && mkdir __build__ && cd __build__
          cmake -DCMAKE_INSTALL_PREFIX=C:/cmake-prefix ${{matrix.opts}} ..
          cmake --build . --config Debug
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Use the installed library (Release)
        shell: cmd
        run: |
          cd "boost-root/libs/%LIBRARY%/test/cmake_install_test/__build__"
          cmake --build . --config Release
          ctest --output-on-failure --no-tests=error -C Release

  windows-cmake-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022
          - os: windows-latest
            opts: "-G \"MinGW Makefiles\""
          - os: windows-latest
            opts: "-T clangcl"

    runs-on: ${{matrix.os}}

    steps:
      - name: Setup Boost
        shell: cmd
        run: |
          echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
          for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
          echo LIBRARY: %LIBRARY%
          echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
          echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
          echo GITHUB_REF: %GITHUB_REF%
          if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
          set BOOST_BRANCH=develop
          for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
          echo BOOST_BRANCH: %BOOST_BRANCH%
          mkdir snapshot
          cd snapshot
          echo Downloading library snapshot: https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip
          curl -L --retry %NET_RETRY_COUNT% -o "%LIBRARY%-%GITHUB_SHA%.zip" "https://github.com/%GITHUB_REPOSITORY%/archive/%GITHUB_SHA%.zip"
          tar -xf "%LIBRARY%-%GITHUB_SHA%.zip"
          if not exist "%LIBRARY%-%GITHUB_SHA%\" (
              echo Library snapshot does not contain the library directory %LIBRARY%-%GITHUB_SHA%:
              dir
              exit /b 1
          )
          del /f "%LIBRARY%-%GITHUB_SHA%.zip"
          cd ..
          git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          if not exist "libs\" mkdir libs
          if exist "libs\%LIBRARY%\" rmdir /s /q "libs\%LIBRARY%"
          move /Y "..\snapshot\%LIBRARY%-%GITHUB_SHA%" "libs\%LIBRARY%"
          rmdir /s /q "..\snapshot"
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs %GIT_FETCH_JOBS%" %LIBRARY%

      - name: Configure
        shell: cmd
        run: |
          cd boost-root
          mkdir __build__ && cd __build__
          cmake -DBOOST_INCLUDE_LIBRARIES=%LIBRARY% -DBUILD_TESTING=ON ${{matrix.opts}} ..

      - name: Build tests (Debug)
        shell: cmd
        run: |
          cd boost-root/__build__
          cmake --build . --target tests --config Debug

      - name: Run tests (Debug)
        shell: cmd
        run: |
          cd boost-root/__build__
          ctest --output-on-failure --no-tests=error -C Debug

      - name: Build tests (Release)
        shell: cmd
        run: |
          cd boost-root/__build__
          cmake --build . --target tests --config Release

      - name: Run tests (Release)
        shell: cmd
        run: |
          cd boost-root/__build__
          ctest --output-on-failure --no-tests=error -C Release
